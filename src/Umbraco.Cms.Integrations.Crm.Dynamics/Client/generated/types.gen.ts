// This file is auto-generated by @hey-api/openapi-ts

export type AggregateExceptionReadable = {
    targetSite?: MethodBaseReadable | null;
    readonly data: {
        [key: string]: unknown;
    };
    innerException?: ExceptionReadable | null;
    helpLink?: string | null;
    source?: string | null;
    hResult: number;
    readonly stackTrace?: string | null;
    readonly innerExceptions: Array<ExceptionReadable>;
    readonly message: string;
};

export type AggregateExceptionWritable = {
    targetSite?: MethodBaseWritable | null;
    innerException?: ExceptionWritable | null;
    helpLink?: string | null;
    source?: string | null;
    hResult: number;
};

export type AssemblyReadable = {
    readonly definedTypes: Array<TypeInfoReadable>;
    readonly exportedTypes: Array<TypeReadable>;
    /**
     * @deprecated
     */
    readonly codeBase?: string | null;
    entryPoint?: MethodInfoReadable | null;
    readonly fullName?: string | null;
    readonly imageRuntimeVersion: string;
    readonly isDynamic: boolean;
    readonly location: string;
    readonly reflectionOnly: boolean;
    readonly isCollectible: boolean;
    readonly isFullyTrusted: boolean;
    readonly customAttributes: Array<CustomAttributeDataReadable>;
    /**
     * @deprecated
     */
    readonly escapedCodeBase: string;
    manifestModule: ModuleReadable;
    readonly modules: Array<ModuleReadable>;
    /**
     * @deprecated
     */
    readonly globalAssemblyCache: boolean;
    readonly hostContext: number;
    securityRuleSet: SecurityRuleSet;
};

export type AssemblyWritable = {
    entryPoint?: MethodInfoWritable | null;
    manifestModule: ModuleWritable;
    securityRuleSet: SecurityRuleSet;
};

export enum CallingConventions {
    STANDARD = 'Standard',
    VAR_ARGS = 'VarArgs',
    ANY = 'Any',
    HAS_THIS = 'HasThis',
    EXPLICIT_THIS = 'ExplicitThis'
}

export type ConstructorInfoReadable = {
    readonly name: string;
    declaringType?: TypeReadable | null;
    reflectedType?: TypeReadable | null;
    module: ModuleReadable;
    readonly customAttributes: Array<CustomAttributeDataReadable>;
    readonly isCollectible: boolean;
    readonly metadataToken: number;
    attributes: MethodAttributes;
    methodImplementationFlags: MethodImplAttributes;
    callingConvention: CallingConventions;
    readonly isAbstract: boolean;
    readonly isConstructor: boolean;
    readonly isFinal: boolean;
    readonly isHideBySig: boolean;
    readonly isSpecialName: boolean;
    readonly isStatic: boolean;
    readonly isVirtual: boolean;
    readonly isAssembly: boolean;
    readonly isFamily: boolean;
    readonly isFamilyAndAssembly: boolean;
    readonly isFamilyOrAssembly: boolean;
    readonly isPrivate: boolean;
    readonly isPublic: boolean;
    readonly isConstructedGenericMethod: boolean;
    readonly isGenericMethod: boolean;
    readonly isGenericMethodDefinition: boolean;
    readonly containsGenericParameters: boolean;
    methodHandle: RuntimeMethodHandle;
    readonly isSecurityCritical: boolean;
    readonly isSecuritySafeCritical: boolean;
    readonly isSecurityTransparent: boolean;
    memberType: MemberTypes;
};

export type ConstructorInfoWritable = {
    declaringType?: TypeWritable | null;
    reflectedType?: TypeWritable | null;
    module: ModuleWritable;
    attributes: MethodAttributes;
    methodImplementationFlags: MethodImplAttributes;
    callingConvention: CallingConventions;
    methodHandle: RuntimeMethodHandle;
    memberType: MemberTypes;
};

export type CustomAttributeDataReadable = {
    attributeType: TypeReadable;
    constructor: ConstructorInfoReadable;
    readonly constructorArguments: Array<CustomAttributeTypedArgumentReadable>;
    readonly namedArguments: Array<CustomAttributeNamedArgumentReadable>;
};

export type CustomAttributeDataWritable = {
    constructor: ConstructorInfoWritable;
};

export type CustomAttributeNamedArgumentReadable = {
    memberInfo: MemberInfoReadable;
    typedValue: CustomAttributeTypedArgumentReadable;
    readonly memberName: string;
    readonly isField: boolean;
};

export type CustomAttributeNamedArgumentWritable = {
    memberInfo: MemberInfoWritable;
    typedValue: CustomAttributeTypedArgumentWritable;
};

export type CustomAttributeTypedArgumentReadable = {
    argumentType: TypeReadable;
    value?: unknown;
};

export type CustomAttributeTypedArgumentWritable = {
    value?: unknown;
};

export enum DynamicsModuleModel {
    OUTBOUND = 'Outbound',
    REAL_TIME = 'RealTime',
    BOTH = 'Both'
}

export enum EventAttributes {
    NONE = 'None',
    SPECIAL_NAME = 'SpecialName',
    RT_SPECIAL_NAME = 'RTSpecialName',
    RESERVED_MASK = 'ReservedMask'
}

export type EventInfoReadable = {
    readonly name: string;
    declaringType?: TypeReadable | null;
    reflectedType?: TypeReadable | null;
    module: ModuleReadable;
    readonly customAttributes: Array<CustomAttributeDataReadable>;
    readonly isCollectible: boolean;
    readonly metadataToken: number;
    memberType: MemberTypes;
    attributes: EventAttributes;
    readonly isSpecialName: boolean;
    addMethod?: MethodInfoReadable | null;
    removeMethod?: MethodInfoReadable | null;
    raiseMethod?: MethodInfoReadable | null;
    readonly isMulticast: boolean;
    eventHandlerType?: TypeReadable | null;
};

export type EventInfoWritable = {
    declaringType?: TypeWritable | null;
    reflectedType?: TypeWritable | null;
    module: ModuleWritable;
    memberType: MemberTypes;
    attributes: EventAttributes;
    addMethod?: MethodInfoWritable | null;
    removeMethod?: MethodInfoWritable | null;
    raiseMethod?: MethodInfoWritable | null;
    eventHandlerType?: TypeWritable | null;
};

export enum EventMessageTypeModel {
    DEFAULT = 'Default',
    INFO = 'Info',
    ERROR = 'Error',
    SUCCESS = 'Success',
    WARNING = 'Warning'
}

export type ExceptionReadable = {
    targetSite?: MethodBaseReadable | null;
    readonly message: string;
    readonly data: {
        [key: string]: unknown;
    };
    innerException?: ExceptionReadable | null;
    helpLink?: string | null;
    source?: string | null;
    hResult: number;
    readonly stackTrace?: string | null;
};

export type ExceptionWritable = {
    targetSite?: MethodBaseWritable | null;
    innerException?: ExceptionWritable | null;
    helpLink?: string | null;
    source?: string | null;
    hResult: number;
};

export enum FieldAttributes {
    PRIVATE_SCOPE = 'PrivateScope',
    PRIVATE = 'Private',
    FAM_AND_ASSEM = 'FamANDAssem',
    ASSEMBLY = 'Assembly',
    FAMILY = 'Family',
    FAM_OR_ASSEM = 'FamORAssem',
    PUBLIC = 'Public',
    FIELD_ACCESS_MASK = 'FieldAccessMask',
    STATIC = 'Static',
    INIT_ONLY = 'InitOnly',
    LITERAL = 'Literal',
    NOT_SERIALIZED = 'NotSerialized',
    HAS_FIELD_RVA = 'HasFieldRVA',
    SPECIAL_NAME = 'SpecialName',
    RT_SPECIAL_NAME = 'RTSpecialName',
    HAS_FIELD_MARSHAL = 'HasFieldMarshal',
    PINVOKE_IMPL = 'PinvokeImpl',
    HAS_DEFAULT = 'HasDefault',
    RESERVED_MASK = 'ReservedMask'
}

export type FieldInfoReadable = {
    readonly name: string;
    declaringType?: TypeReadable | null;
    reflectedType?: TypeReadable | null;
    module: ModuleReadable;
    readonly customAttributes: Array<CustomAttributeDataReadable>;
    readonly isCollectible: boolean;
    readonly metadataToken: number;
    memberType: MemberTypes;
    attributes: FieldAttributes;
    fieldType: TypeReadable;
    readonly isInitOnly: boolean;
    readonly isLiteral: boolean;
    /**
     * @deprecated
     */
    readonly isNotSerialized: boolean;
    readonly isPinvokeImpl: boolean;
    readonly isSpecialName: boolean;
    readonly isStatic: boolean;
    readonly isAssembly: boolean;
    readonly isFamily: boolean;
    readonly isFamilyAndAssembly: boolean;
    readonly isFamilyOrAssembly: boolean;
    readonly isPrivate: boolean;
    readonly isPublic: boolean;
    readonly isSecurityCritical: boolean;
    readonly isSecuritySafeCritical: boolean;
    readonly isSecurityTransparent: boolean;
    fieldHandle: RuntimeFieldHandle;
};

export type FieldInfoWritable = {
    declaringType?: TypeWritable | null;
    reflectedType?: TypeWritable | null;
    module: ModuleWritable;
    memberType: MemberTypes;
    attributes: FieldAttributes;
    fieldType: TypeWritable;
    fieldHandle: RuntimeFieldHandle;
};

export type FormDtoModel = {
    id: string;
    name: string;
    rawHtml: string;
    standaloneHtml: string;
    module: DynamicsModuleModel;
    iframeEmbedded: boolean;
};

export enum GenericParameterAttributes {
    NONE = 'None',
    COVARIANT = 'Covariant',
    CONTRAVARIANT = 'Contravariant',
    VARIANCE_MASK = 'VarianceMask',
    REFERENCE_TYPE_CONSTRAINT = 'ReferenceTypeConstraint',
    NOT_NULLABLE_VALUE_TYPE_CONSTRAINT = 'NotNullableValueTypeConstraint',
    DEFAULT_CONSTRUCTOR_CONSTRAINT = 'DefaultConstructorConstraint',
    SPECIAL_CONSTRAINT_MASK = 'SpecialConstraintMask',
    ALLOW_BY_REF_LIKE = 'AllowByRefLike'
}

export type ICustomAttributeProvider = {
    [key: string]: never;
};

export type IntPtr = {
    [key: string]: never;
};

export enum LayoutKind {
    SEQUENTIAL = 'Sequential',
    EXPLICIT = 'Explicit',
    AUTO = 'Auto'
}

export type MemberInfoReadable = {
    memberType: MemberTypes;
    readonly name: string;
    declaringType?: TypeReadable | null;
    reflectedType?: TypeReadable | null;
    module: ModuleReadable;
    readonly customAttributes: Array<CustomAttributeDataReadable>;
    readonly isCollectible: boolean;
    readonly metadataToken: number;
};

export type MemberInfoWritable = {
    memberType: MemberTypes;
    declaringType?: TypeWritable | null;
    reflectedType?: TypeWritable | null;
    module: ModuleWritable;
};

export enum MemberTypes {
    CONSTRUCTOR = 'Constructor',
    EVENT = 'Event',
    FIELD = 'Field',
    METHOD = 'Method',
    PROPERTY = 'Property',
    TYPE_INFO = 'TypeInfo',
    CUSTOM = 'Custom',
    NESTED_TYPE = 'NestedType',
    ALL = 'All'
}

export enum MethodAttributes {
    PRIVATE_SCOPE = 'PrivateScope',
    REUSE_SLOT = 'ReuseSlot',
    PRIVATE = 'Private',
    FAM_AND_ASSEM = 'FamANDAssem',
    ASSEMBLY = 'Assembly',
    FAMILY = 'Family',
    FAM_OR_ASSEM = 'FamORAssem',
    PUBLIC = 'Public',
    MEMBER_ACCESS_MASK = 'MemberAccessMask',
    UNMANAGED_EXPORT = 'UnmanagedExport',
    STATIC = 'Static',
    FINAL = 'Final',
    VIRTUAL = 'Virtual',
    HIDE_BY_SIG = 'HideBySig',
    NEW_SLOT = 'NewSlot',
    VTABLE_LAYOUT_MASK = 'VtableLayoutMask',
    CHECK_ACCESS_ON_OVERRIDE = 'CheckAccessOnOverride',
    ABSTRACT = 'Abstract',
    SPECIAL_NAME = 'SpecialName',
    RT_SPECIAL_NAME = 'RTSpecialName',
    PINVOKE_IMPL = 'PinvokeImpl',
    HAS_SECURITY = 'HasSecurity',
    REQUIRE_SEC_OBJECT = 'RequireSecObject',
    RESERVED_MASK = 'ReservedMask'
}

export type MethodBaseReadable = {
    memberType: MemberTypes;
    readonly name: string;
    declaringType?: TypeReadable | null;
    reflectedType?: TypeReadable | null;
    module: ModuleReadable;
    readonly customAttributes: Array<CustomAttributeDataReadable>;
    readonly isCollectible: boolean;
    readonly metadataToken: number;
    attributes: MethodAttributes;
    methodImplementationFlags: MethodImplAttributes;
    callingConvention: CallingConventions;
    readonly isAbstract: boolean;
    readonly isConstructor: boolean;
    readonly isFinal: boolean;
    readonly isHideBySig: boolean;
    readonly isSpecialName: boolean;
    readonly isStatic: boolean;
    readonly isVirtual: boolean;
    readonly isAssembly: boolean;
    readonly isFamily: boolean;
    readonly isFamilyAndAssembly: boolean;
    readonly isFamilyOrAssembly: boolean;
    readonly isPrivate: boolean;
    readonly isPublic: boolean;
    readonly isConstructedGenericMethod: boolean;
    readonly isGenericMethod: boolean;
    readonly isGenericMethodDefinition: boolean;
    readonly containsGenericParameters: boolean;
    methodHandle: RuntimeMethodHandle;
    readonly isSecurityCritical: boolean;
    readonly isSecuritySafeCritical: boolean;
    readonly isSecurityTransparent: boolean;
};

export type MethodBaseWritable = {
    memberType: MemberTypes;
    declaringType?: TypeWritable | null;
    reflectedType?: TypeWritable | null;
    module: ModuleWritable;
    attributes: MethodAttributes;
    methodImplementationFlags: MethodImplAttributes;
    callingConvention: CallingConventions;
    methodHandle: RuntimeMethodHandle;
};

export enum MethodImplAttributes {
    IL = 'IL',
    MANAGED = 'Managed',
    NATIVE = 'Native',
    OPTIL = 'OPTIL',
    CODE_TYPE_MASK = 'CodeTypeMask',
    RUNTIME = 'Runtime',
    MANAGED_MASK = 'ManagedMask',
    UNMANAGED = 'Unmanaged',
    NO_INLINING = 'NoInlining',
    FORWARD_REF = 'ForwardRef',
    SYNCHRONIZED = 'Synchronized',
    NO_OPTIMIZATION = 'NoOptimization',
    PRESERVE_SIG = 'PreserveSig',
    AGGRESSIVE_INLINING = 'AggressiveInlining',
    AGGRESSIVE_OPTIMIZATION = 'AggressiveOptimization',
    INTERNAL_CALL = 'InternalCall',
    MAX_METHOD_IMPL_VAL = 'MaxMethodImplVal'
}

export type MethodInfoReadable = {
    readonly name: string;
    declaringType?: TypeReadable | null;
    reflectedType?: TypeReadable | null;
    module: ModuleReadable;
    readonly customAttributes: Array<CustomAttributeDataReadable>;
    readonly isCollectible: boolean;
    readonly metadataToken: number;
    attributes: MethodAttributes;
    methodImplementationFlags: MethodImplAttributes;
    callingConvention: CallingConventions;
    readonly isAbstract: boolean;
    readonly isConstructor: boolean;
    readonly isFinal: boolean;
    readonly isHideBySig: boolean;
    readonly isSpecialName: boolean;
    readonly isStatic: boolean;
    readonly isVirtual: boolean;
    readonly isAssembly: boolean;
    readonly isFamily: boolean;
    readonly isFamilyAndAssembly: boolean;
    readonly isFamilyOrAssembly: boolean;
    readonly isPrivate: boolean;
    readonly isPublic: boolean;
    readonly isConstructedGenericMethod: boolean;
    readonly isGenericMethod: boolean;
    readonly isGenericMethodDefinition: boolean;
    readonly containsGenericParameters: boolean;
    methodHandle: RuntimeMethodHandle;
    readonly isSecurityCritical: boolean;
    readonly isSecuritySafeCritical: boolean;
    readonly isSecurityTransparent: boolean;
    memberType: MemberTypes;
    returnParameter: ParameterInfoReadable;
    returnType: TypeReadable;
    returnTypeCustomAttributes: ICustomAttributeProvider;
};

export type MethodInfoWritable = {
    declaringType?: TypeWritable | null;
    reflectedType?: TypeWritable | null;
    module: ModuleWritable;
    attributes: MethodAttributes;
    methodImplementationFlags: MethodImplAttributes;
    callingConvention: CallingConventions;
    methodHandle: RuntimeMethodHandle;
    memberType: MemberTypes;
    returnType: TypeWritable;
    returnTypeCustomAttributes: ICustomAttributeProvider;
};

export type ModuleReadable = {
    assembly: AssemblyReadable;
    readonly fullyQualifiedName: string;
    readonly name: string;
    readonly mdStreamVersion: number;
    readonly moduleVersionId: string;
    readonly scopeName: string;
    moduleHandle: ModuleHandle;
    readonly customAttributes: Array<CustomAttributeDataReadable>;
    readonly metadataToken: number;
};

export type ModuleWritable = {
    assembly: AssemblyWritable;
};

export type ModuleHandle = {
    readonly mdStreamVersion: number;
};

export type NotificationHeaderModel = {
    message: string;
    category: string;
    type: EventMessageTypeModel;
};

export type OAuthConfigurationDtoModel = {
    id: number;
    accessToken: string;
    userId: string;
    fullName: string;
    isAuthorized: boolean;
    message: string;
};

export type OAuthRequestDtoModel = {
    code: string;
};

export enum ParameterAttributes {
    NONE = 'None',
    IN = 'In',
    OUT = 'Out',
    LCID = 'Lcid',
    RETVAL = 'Retval',
    OPTIONAL = 'Optional',
    HAS_DEFAULT = 'HasDefault',
    HAS_FIELD_MARSHAL = 'HasFieldMarshal',
    RESERVED3 = 'Reserved3',
    RESERVED4 = 'Reserved4',
    RESERVED_MASK = 'ReservedMask'
}

export type ParameterInfoReadable = {
    attributes: ParameterAttributes;
    member: MemberInfoReadable;
    readonly name?: string | null;
    parameterType: TypeReadable;
    readonly position: number;
    readonly isIn: boolean;
    readonly isLcid: boolean;
    readonly isOptional: boolean;
    readonly isOut: boolean;
    readonly isRetval: boolean;
    readonly defaultValue?: unknown;
    readonly rawDefaultValue?: unknown;
    readonly hasDefaultValue: boolean;
    readonly customAttributes: Array<CustomAttributeDataReadable>;
    readonly metadataToken: number;
};

export type ParameterInfoWritable = {
    attributes: ParameterAttributes;
    member: MemberInfoWritable;
    parameterType: TypeWritable;
};

export enum PropertyAttributes {
    NONE = 'None',
    SPECIAL_NAME = 'SpecialName',
    RT_SPECIAL_NAME = 'RTSpecialName',
    HAS_DEFAULT = 'HasDefault',
    RESERVED2 = 'Reserved2',
    RESERVED3 = 'Reserved3',
    RESERVED4 = 'Reserved4',
    RESERVED_MASK = 'ReservedMask'
}

export type PropertyInfoReadable = {
    readonly name: string;
    declaringType?: TypeReadable | null;
    reflectedType?: TypeReadable | null;
    module: ModuleReadable;
    readonly customAttributes: Array<CustomAttributeDataReadable>;
    readonly isCollectible: boolean;
    readonly metadataToken: number;
    memberType: MemberTypes;
    propertyType: TypeReadable;
    attributes: PropertyAttributes;
    readonly isSpecialName: boolean;
    readonly canRead: boolean;
    readonly canWrite: boolean;
    getMethod?: MethodInfoReadable | null;
    setMethod?: MethodInfoReadable | null;
};

export type PropertyInfoWritable = {
    declaringType?: TypeWritable | null;
    reflectedType?: TypeWritable | null;
    module: ModuleWritable;
    memberType: MemberTypes;
    propertyType: TypeWritable;
    attributes: PropertyAttributes;
    getMethod?: MethodInfoWritable | null;
    setMethod?: MethodInfoWritable | null;
};

export type RuntimeFieldHandle = {
    value: IntPtr;
};

export type RuntimeMethodHandle = {
    value: IntPtr;
};

export type RuntimeTypeHandle = {
    value: IntPtr;
};

export enum SecurityRuleSet {
    NONE = 'None',
    LEVEL1 = 'Level1',
    LEVEL2 = 'Level2'
}

export type StructLayoutAttribute = {
    readonly typeId: unknown;
    value: LayoutKind;
};

export enum TaskCreationOptions {
    NONE = 'None',
    PREFER_FAIRNESS = 'PreferFairness',
    LONG_RUNNING = 'LongRunning',
    ATTACHED_TO_PARENT = 'AttachedToParent',
    DENY_CHILD_ATTACH = 'DenyChildAttach',
    HIDE_SCHEDULER = 'HideScheduler',
    RUN_CONTINUATIONS_ASYNCHRONOUSLY = 'RunContinuationsAsynchronously'
}

export enum TaskStatus {
    CREATED = 'Created',
    WAITING_FOR_ACTIVATION = 'WaitingForActivation',
    WAITING_TO_RUN = 'WaitingToRun',
    RUNNING = 'Running',
    WAITING_FOR_CHILDREN_TO_COMPLETE = 'WaitingForChildrenToComplete',
    RAN_TO_COMPLETION = 'RanToCompletion',
    CANCELED = 'Canceled',
    FAULTED = 'Faulted'
}

export type Task1Readable = {
    readonly id: number;
    exception?: AggregateExceptionReadable | null;
    status: TaskStatus;
    readonly isCanceled: boolean;
    readonly isCompleted: boolean;
    readonly isCompletedSuccessfully: boolean;
    creationOptions: TaskCreationOptions;
    readonly asyncState?: unknown;
    readonly isFaulted: boolean;
    readonly result?: string | null;
};

export type Task1Writable = {
    exception?: AggregateExceptionWritable | null;
    status: TaskStatus;
    creationOptions: TaskCreationOptions;
};

export type TypeReadable = {
    readonly name: string;
    readonly customAttributes: Array<CustomAttributeDataReadable>;
    readonly isCollectible: boolean;
    readonly metadataToken: number;
    memberType: MemberTypes;
    readonly namespace?: string | null;
    readonly assemblyQualifiedName?: string | null;
    readonly fullName?: string | null;
    assembly: AssemblyReadable;
    module: ModuleReadable;
    readonly isInterface: boolean;
    readonly isNested: boolean;
    declaringType?: TypeReadable | null;
    declaringMethod?: MethodBaseReadable | null;
    reflectedType?: TypeReadable | null;
    underlyingSystemType: TypeReadable;
    readonly isTypeDefinition: boolean;
    readonly isArray: boolean;
    readonly isByRef: boolean;
    readonly isPointer: boolean;
    readonly isConstructedGenericType: boolean;
    readonly isGenericParameter: boolean;
    readonly isGenericTypeParameter: boolean;
    readonly isGenericMethodParameter: boolean;
    readonly isGenericType: boolean;
    readonly isGenericTypeDefinition: boolean;
    readonly isSZArray: boolean;
    readonly isVariableBoundArray: boolean;
    readonly isByRefLike: boolean;
    readonly isFunctionPointer: boolean;
    readonly isUnmanagedFunctionPointer: boolean;
    readonly hasElementType: boolean;
    readonly genericTypeArguments: Array<TypeReadable>;
    readonly genericParameterPosition: number;
    genericParameterAttributes: GenericParameterAttributes;
    attributes: TypeAttributes;
    readonly isAbstract: boolean;
    readonly isImport: boolean;
    readonly isSealed: boolean;
    readonly isSpecialName: boolean;
    readonly isClass: boolean;
    readonly isNestedAssembly: boolean;
    readonly isNestedFamANDAssem: boolean;
    readonly isNestedFamily: boolean;
    readonly isNestedFamORAssem: boolean;
    readonly isNestedPrivate: boolean;
    readonly isNestedPublic: boolean;
    readonly isNotPublic: boolean;
    readonly isPublic: boolean;
    readonly isAutoLayout: boolean;
    readonly isExplicitLayout: boolean;
    readonly isLayoutSequential: boolean;
    readonly isAnsiClass: boolean;
    readonly isAutoClass: boolean;
    readonly isUnicodeClass: boolean;
    readonly isCOMObject: boolean;
    readonly isContextful: boolean;
    readonly isEnum: boolean;
    readonly isMarshalByRef: boolean;
    readonly isPrimitive: boolean;
    readonly isValueType: boolean;
    readonly isSignatureType: boolean;
    readonly isSecurityCritical: boolean;
    readonly isSecuritySafeCritical: boolean;
    readonly isSecurityTransparent: boolean;
    structLayoutAttribute?: StructLayoutAttribute | null;
    typeInitializer?: ConstructorInfoReadable | null;
    typeHandle: RuntimeTypeHandle;
    readonly guid: string;
    baseType?: TypeReadable | null;
    /**
     * @deprecated
     */
    readonly isSerializable: boolean;
    readonly containsGenericParameters: boolean;
    readonly isVisible: boolean;
};

export type TypeWritable = {
    memberType: MemberTypes;
    assembly: AssemblyWritable;
    module: ModuleWritable;
    declaringType?: TypeWritable | null;
    declaringMethod?: MethodBaseWritable | null;
    reflectedType?: TypeWritable | null;
    underlyingSystemType: TypeWritable;
    genericParameterAttributes: GenericParameterAttributes;
    attributes: TypeAttributes;
    structLayoutAttribute?: null;
    typeInitializer?: ConstructorInfoWritable | null;
    typeHandle: RuntimeTypeHandle;
    baseType?: TypeWritable | null;
};

export enum TypeAttributes {
    NOT_PUBLIC = 'NotPublic',
    AUTO_LAYOUT = 'AutoLayout',
    ANSI_CLASS = 'AnsiClass',
    CLASS = 'Class',
    PUBLIC = 'Public',
    NESTED_PUBLIC = 'NestedPublic',
    NESTED_PRIVATE = 'NestedPrivate',
    NESTED_FAMILY = 'NestedFamily',
    NESTED_ASSEMBLY = 'NestedAssembly',
    NESTED_FAM_AND_ASSEM = 'NestedFamANDAssem',
    VISIBILITY_MASK = 'VisibilityMask',
    NESTED_FAM_OR_ASSEM = 'NestedFamORAssem',
    SEQUENTIAL_LAYOUT = 'SequentialLayout',
    EXPLICIT_LAYOUT = 'ExplicitLayout',
    LAYOUT_MASK = 'LayoutMask',
    INTERFACE = 'Interface',
    CLASS_SEMANTICS_MASK = 'ClassSemanticsMask',
    ABSTRACT = 'Abstract',
    SEALED = 'Sealed',
    SPECIAL_NAME = 'SpecialName',
    RT_SPECIAL_NAME = 'RTSpecialName',
    IMPORT = 'Import',
    SERIALIZABLE = 'Serializable',
    WINDOWS_RUNTIME = 'WindowsRuntime',
    UNICODE_CLASS = 'UnicodeClass',
    AUTO_CLASS = 'AutoClass',
    STRING_FORMAT_MASK = 'StringFormatMask',
    CUSTOM_FORMAT_CLASS = 'CustomFormatClass',
    HAS_SECURITY = 'HasSecurity',
    RESERVED_MASK = 'ReservedMask',
    BEFORE_FIELD_INIT = 'BeforeFieldInit',
    CUSTOM_FORMAT_MASK = 'CustomFormatMask'
}

export type TypeInfoReadable = {
    readonly name: string;
    readonly customAttributes: Array<CustomAttributeDataReadable>;
    readonly isCollectible: boolean;
    readonly metadataToken: number;
    memberType: MemberTypes;
    readonly namespace?: string | null;
    readonly assemblyQualifiedName?: string | null;
    readonly fullName?: string | null;
    assembly: AssemblyReadable;
    module: ModuleReadable;
    readonly isInterface: boolean;
    readonly isNested: boolean;
    declaringType?: TypeReadable | null;
    declaringMethod?: MethodBaseReadable | null;
    reflectedType?: TypeReadable | null;
    underlyingSystemType: TypeReadable;
    readonly isTypeDefinition: boolean;
    readonly isArray: boolean;
    readonly isByRef: boolean;
    readonly isPointer: boolean;
    readonly isConstructedGenericType: boolean;
    readonly isGenericParameter: boolean;
    readonly isGenericTypeParameter: boolean;
    readonly isGenericMethodParameter: boolean;
    readonly isGenericType: boolean;
    readonly isGenericTypeDefinition: boolean;
    readonly isSZArray: boolean;
    readonly isVariableBoundArray: boolean;
    readonly isByRefLike: boolean;
    readonly isFunctionPointer: boolean;
    readonly isUnmanagedFunctionPointer: boolean;
    readonly hasElementType: boolean;
    readonly genericTypeArguments: Array<TypeReadable>;
    readonly genericParameterPosition: number;
    genericParameterAttributes: GenericParameterAttributes;
    attributes: TypeAttributes;
    readonly isAbstract: boolean;
    readonly isImport: boolean;
    readonly isSealed: boolean;
    readonly isSpecialName: boolean;
    readonly isClass: boolean;
    readonly isNestedAssembly: boolean;
    readonly isNestedFamANDAssem: boolean;
    readonly isNestedFamily: boolean;
    readonly isNestedFamORAssem: boolean;
    readonly isNestedPrivate: boolean;
    readonly isNestedPublic: boolean;
    readonly isNotPublic: boolean;
    readonly isPublic: boolean;
    readonly isAutoLayout: boolean;
    readonly isExplicitLayout: boolean;
    readonly isLayoutSequential: boolean;
    readonly isAnsiClass: boolean;
    readonly isAutoClass: boolean;
    readonly isUnicodeClass: boolean;
    readonly isCOMObject: boolean;
    readonly isContextful: boolean;
    readonly isEnum: boolean;
    readonly isMarshalByRef: boolean;
    readonly isPrimitive: boolean;
    readonly isValueType: boolean;
    readonly isSignatureType: boolean;
    readonly isSecurityCritical: boolean;
    readonly isSecuritySafeCritical: boolean;
    readonly isSecurityTransparent: boolean;
    structLayoutAttribute?: StructLayoutAttribute | null;
    typeInitializer?: ConstructorInfoReadable | null;
    typeHandle: RuntimeTypeHandle;
    readonly guid: string;
    baseType?: TypeReadable | null;
    /**
     * @deprecated
     */
    readonly isSerializable: boolean;
    readonly containsGenericParameters: boolean;
    readonly isVisible: boolean;
    readonly genericTypeParameters: Array<TypeReadable>;
    readonly declaredConstructors: Array<ConstructorInfoReadable>;
    readonly declaredEvents: Array<EventInfoReadable>;
    readonly declaredFields: Array<FieldInfoReadable>;
    readonly declaredMembers: Array<MemberInfoReadable>;
    readonly declaredMethods: Array<MethodInfoReadable>;
    readonly declaredNestedTypes: Array<TypeInfoReadable>;
    readonly declaredProperties: Array<PropertyInfoReadable>;
    readonly implementedInterfaces: Array<TypeReadable>;
};

export type TypeInfoWritable = {
    memberType: MemberTypes;
    assembly: AssemblyWritable;
    module: ModuleWritable;
    declaringType?: TypeWritable | null;
    declaringMethod?: MethodBaseWritable | null;
    reflectedType?: TypeWritable | null;
    underlyingSystemType: TypeWritable;
    genericParameterAttributes: GenericParameterAttributes;
    attributes: TypeAttributes;
    structLayoutAttribute?: null;
    typeInitializer?: ConstructorInfoWritable | null;
    typeHandle: RuntimeTypeHandle;
    baseType?: TypeWritable | null;
};

export type GetFormsData = {
    body?: never;
    path?: never;
    query?: {
        module?: string;
    };
    url: '/umbraco/dynamics/management/api/v1/forms';
};

export type GetFormsErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
};

export type GetFormsResponses = {
    /**
     * OK
     */
    200: Array<FormDtoModel>;
};

export type GetFormsResponse = GetFormsResponses[keyof GetFormsResponses];

export type PostFormsAccessTokenData = {
    body?: OAuthRequestDtoModel;
    path?: never;
    query?: never;
    url: '/umbraco/dynamics/management/api/v1/forms/access-token';
};

export type PostFormsAccessTokenErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
};

export type PostFormsAccessTokenResponses = {
    /**
     * OK
     */
    200: string;
};

export type PostFormsAccessTokenResponse = PostFormsAccessTokenResponses[keyof PostFormsAccessTokenResponses];

export type GetFormsAuthorizationUrlData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/umbraco/dynamics/management/api/v1/forms/authorization-url';
};

export type GetFormsAuthorizationUrlErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
};

export type GetFormsAuthorizationUrlResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetFormsAuthorizationUrlResponse = GetFormsAuthorizationUrlResponses[keyof GetFormsAuthorizationUrlResponses];

export type GetFormsEmbedCodeData = {
    body?: never;
    path?: never;
    query?: {
        formId?: string;
    };
    url: '/umbraco/dynamics/management/api/v1/forms/embed-code';
};

export type GetFormsEmbedCodeErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
};

export type GetFormsEmbedCodeResponses = {
    /**
     * OK
     */
    200: Task1Readable;
};

export type GetFormsEmbedCodeResponse = GetFormsEmbedCodeResponses[keyof GetFormsEmbedCodeResponses];

export type GetFormsOauthConfigurationData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/umbraco/dynamics/management/api/v1/forms/oauth-configuration';
};

export type GetFormsOauthConfigurationErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
};

export type GetFormsOauthConfigurationResponses = {
    /**
     * OK
     */
    200: OAuthConfigurationDtoModel;
};

export type GetFormsOauthConfigurationResponse = GetFormsOauthConfigurationResponses[keyof GetFormsOauthConfigurationResponses];

export type DeleteFormsRevokeAccessTokenData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/umbraco/dynamics/management/api/v1/forms/revoke-access-token';
};

export type DeleteFormsRevokeAccessTokenErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
};

export type DeleteFormsRevokeAccessTokenResponses = {
    /**
     * OK
     */
    200: string;
};

export type DeleteFormsRevokeAccessTokenResponse = DeleteFormsRevokeAccessTokenResponses[keyof DeleteFormsRevokeAccessTokenResponses];

export type GetFormsSystemUserFullnameData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/umbraco/dynamics/management/api/v1/forms/system-user-fullname';
};

export type GetFormsSystemUserFullnameErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
};

export type GetFormsSystemUserFullnameResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetFormsSystemUserFullnameResponse = GetFormsSystemUserFullnameResponses[keyof GetFormsSystemUserFullnameResponses];

export type GetUmbracoApiDynamicsAuthorizationData = {
    body?: never;
    path?: never;
    query?: {
        code?: string;
    };
    url: '/umbraco/api/dynamics/authorization';
};

export type GetUmbracoApiDynamicsAuthorizationErrors = {
    /**
     * The resource is protected and requires an authentication token
     */
    401: unknown;
};

export type GetUmbracoApiDynamicsAuthorizationResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetUmbracoApiDynamicsAuthorizationResponse = GetUmbracoApiDynamicsAuthorizationResponses[keyof GetUmbracoApiDynamicsAuthorizationResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:30450' | (string & {});
};