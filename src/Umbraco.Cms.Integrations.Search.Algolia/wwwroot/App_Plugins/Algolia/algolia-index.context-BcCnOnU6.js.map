{"version":3,"file":"algolia-index.context-BcCnOnU6.js","sources":["../../../Client/generated/core/ApiError.ts","../../../Client/generated/core/CancelablePromise.ts","../../../Client/generated/core/request.ts","../../../Client/generated/services.gen.ts","../../../Client/src/repository/algolia-index.data-source.ts","../../../Client/src/repository/algolia-index.repository.ts","../../../Client/src/context/algolia-index.context.ts"],"sourcesContent":["import type { ApiRequestOptions } from './ApiRequestOptions';\r\nimport type { ApiResult } from './ApiResult';\r\n\r\nexport class ApiError extends Error {\r\n\tpublic readonly url: string;\r\n\tpublic readonly status: number;\r\n\tpublic readonly statusText: string;\r\n\tpublic readonly body: unknown;\r\n\tpublic readonly request: ApiRequestOptions;\r\n\r\n\tconstructor(request: ApiRequestOptions, response: ApiResult, message: string) {\r\n\t\tsuper(message);\r\n\r\n\t\tthis.name = 'ApiError';\r\n\t\tthis.url = response.url;\r\n\t\tthis.status = response.status;\r\n\t\tthis.statusText = response.statusText;\r\n\t\tthis.body = response.body;\r\n\t\tthis.request = request;\r\n\t}\r\n}","export class CancelError extends Error {\r\n\tconstructor(message: string) {\r\n\t\tsuper(message);\r\n\t\tthis.name = 'CancelError';\r\n\t}\r\n\r\n\tpublic get isCancelled(): boolean {\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nexport interface OnCancel {\r\n\treadonly isResolved: boolean;\r\n\treadonly isRejected: boolean;\r\n\treadonly isCancelled: boolean;\r\n\r\n\t(cancelHandler: () => void): void;\r\n}\r\n\r\nexport class CancelablePromise<T> implements Promise<T> {\r\n\tprivate _isResolved: boolean;\r\n\tprivate _isRejected: boolean;\r\n\tprivate _isCancelled: boolean;\r\n\treadonly cancelHandlers: (() => void)[];\r\n\treadonly promise: Promise<T>;\r\n\tprivate _resolve?: (value: T | PromiseLike<T>) => void;\r\n\tprivate _reject?: (reason?: unknown) => void;\r\n\r\n\tconstructor(\r\n\t\texecutor: (\r\n\t\t\tresolve: (value: T | PromiseLike<T>) => void,\r\n\t\t\treject: (reason?: unknown) => void,\r\n\t\t\tonCancel: OnCancel\r\n\t\t) => void\r\n\t) {\r\n\t\tthis._isResolved = false;\r\n\t\tthis._isRejected = false;\r\n\t\tthis._isCancelled = false;\r\n\t\tthis.cancelHandlers = [];\r\n\t\tthis.promise = new Promise<T>((resolve, reject) => {\r\n\t\t\tthis._resolve = resolve;\r\n\t\t\tthis._reject = reject;\r\n\r\n\t\t\tconst onResolve = (value: T | PromiseLike<T>): void => {\r\n\t\t\t\tif (this._isResolved || this._isRejected || this._isCancelled) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tthis._isResolved = true;\r\n\t\t\t\tif (this._resolve) this._resolve(value);\r\n\t\t\t};\r\n\r\n\t\t\tconst onReject = (reason?: unknown): void => {\r\n\t\t\t\tif (this._isResolved || this._isRejected || this._isCancelled) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tthis._isRejected = true;\r\n\t\t\t\tif (this._reject) this._reject(reason);\r\n\t\t\t};\r\n\r\n\t\t\tconst onCancel = (cancelHandler: () => void): void => {\r\n\t\t\t\tif (this._isResolved || this._isRejected || this._isCancelled) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tthis.cancelHandlers.push(cancelHandler);\r\n\t\t\t};\r\n\r\n\t\t\tObject.defineProperty(onCancel, 'isResolved', {\r\n\t\t\t\tget: (): boolean => this._isResolved,\r\n\t\t\t});\r\n\r\n\t\t\tObject.defineProperty(onCancel, 'isRejected', {\r\n\t\t\t\tget: (): boolean => this._isRejected,\r\n\t\t\t});\r\n\r\n\t\t\tObject.defineProperty(onCancel, 'isCancelled', {\r\n\t\t\t\tget: (): boolean => this._isCancelled,\r\n\t\t\t});\r\n\r\n\t\t\treturn executor(onResolve, onReject, onCancel as OnCancel);\r\n\t\t});\r\n\t}\r\n\r\n\tget [Symbol.toStringTag]() {\r\n\t\treturn \"Cancellable Promise\";\r\n\t}\r\n\r\n\tpublic then<TResult1 = T, TResult2 = never>(\r\n\t\tonFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\r\n\t\tonRejected?: ((reason: unknown) => TResult2 | PromiseLike<TResult2>) | null\r\n\t): Promise<TResult1 | TResult2> {\r\n\t\treturn this.promise.then(onFulfilled, onRejected);\r\n\t}\r\n\r\n\tpublic catch<TResult = never>(\r\n\t\tonRejected?: ((reason: unknown) => TResult | PromiseLike<TResult>) | null\r\n\t): Promise<T | TResult> {\r\n\t\treturn this.promise.catch(onRejected);\r\n\t}\r\n\r\n\tpublic finally(onFinally?: (() => void) | null): Promise<T> {\r\n\t\treturn this.promise.finally(onFinally);\r\n\t}\r\n\r\n\tpublic cancel(): void {\r\n\t\tif (this._isResolved || this._isRejected || this._isCancelled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._isCancelled = true;\r\n\t\tif (this.cancelHandlers.length) {\r\n\t\t\ttry {\r\n\t\t\t\tfor (const cancelHandler of this.cancelHandlers) {\r\n\t\t\t\t\tcancelHandler();\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.warn('Cancellation threw an error', error);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.cancelHandlers.length = 0;\r\n\t\tif (this._reject) this._reject(new CancelError('Request aborted'));\r\n\t}\r\n\r\n\tpublic get isCancelled(): boolean {\r\n\t\treturn this._isCancelled;\r\n\t}\r\n}","import { ApiError } from './ApiError';\r\nimport type { ApiRequestOptions } from './ApiRequestOptions';\r\nimport type { ApiResult } from './ApiResult';\r\nimport { CancelablePromise } from './CancelablePromise';\r\nimport type { OnCancel } from './CancelablePromise';\r\nimport type { OpenAPIConfig } from './OpenAPI';\r\n\r\nexport const isString = (value: unknown): value is string => {\r\n\treturn typeof value === 'string';\r\n};\r\n\r\nexport const isStringWithValue = (value: unknown): value is string => {\r\n\treturn isString(value) && value !== '';\r\n};\r\n\r\nexport const isBlob = (value: any): value is Blob => {\r\n\treturn value instanceof Blob;\r\n};\r\n\r\nexport const isFormData = (value: unknown): value is FormData => {\r\n\treturn value instanceof FormData;\r\n};\r\n\r\nexport const base64 = (str: string): string => {\r\n\ttry {\r\n\t\treturn btoa(str);\r\n\t} catch (err) {\r\n\t\t// @ts-ignore\r\n\t\treturn Buffer.from(str).toString('base64');\r\n\t}\r\n};\r\n\r\nexport const getQueryString = (params: Record<string, unknown>): string => {\r\n\tconst qs: string[] = [];\r\n\r\n\tconst append = (key: string, value: unknown) => {\r\n\t\tqs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\r\n\t};\r\n\r\n\tconst encodePair = (key: string, value: unknown) => {\r\n\t\tif (value === undefined || value === null) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (value instanceof Date) {\r\n\t\t\tappend(key, value.toISOString());\r\n\t\t} else if (Array.isArray(value)) {\r\n\t\t\tvalue.forEach(v => encodePair(key, v));\r\n\t\t} else if (typeof value === 'object') {\r\n\t\t\tObject.entries(value).forEach(([k, v]) => encodePair(`${key}[${k}]`, v));\r\n\t\t} else {\r\n\t\t\tappend(key, value);\r\n\t\t}\r\n\t};\r\n\r\n\tObject.entries(params).forEach(([key, value]) => encodePair(key, value));\r\n\r\n\treturn qs.length ? `?${qs.join('&')}` : '';\r\n};\r\n\r\nconst getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {\r\n\tconst encoder = config.ENCODE_PATH || encodeURI;\r\n\r\n\tconst path = options.url\r\n\t\t.replace('{api-version}', config.VERSION)\r\n\t\t.replace(/{(.*?)}/g, (substring: string, group: string) => {\r\n\t\t\tif (options.path?.hasOwnProperty(group)) {\r\n\t\t\t\treturn encoder(String(options.path[group]));\r\n\t\t\t}\r\n\t\t\treturn substring;\r\n\t\t});\r\n\r\n\tconst url = config.BASE + path;\r\n\treturn options.query ? url + getQueryString(options.query) : url;\r\n};\r\n\r\nexport const getFormData = (options: ApiRequestOptions): FormData | undefined => {\r\n\tif (options.formData) {\r\n\t\tconst formData = new FormData();\r\n\r\n\t\tconst process = (key: string, value: unknown) => {\r\n\t\t\tif (isString(value) || isBlob(value)) {\r\n\t\t\t\tformData.append(key, value);\r\n\t\t\t} else {\r\n\t\t\t\tformData.append(key, JSON.stringify(value));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tObject.entries(options.formData)\r\n\t\t\t.filter(([, value]) => value !== undefined && value !== null)\r\n\t\t\t.forEach(([key, value]) => {\r\n\t\t\t\tif (Array.isArray(value)) {\r\n\t\t\t\t\tvalue.forEach(v => process(key, v));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tprocess(key, value);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\treturn formData;\r\n\t}\r\n\treturn undefined;\r\n};\r\n\r\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\r\n\r\nexport const resolve = async <T>(options: ApiRequestOptions, resolver?: T | Resolver<T>): Promise<T | undefined> => {\r\n\tif (typeof resolver === 'function') {\r\n\t\treturn (resolver as Resolver<T>)(options);\r\n\t}\r\n\treturn resolver;\r\n};\r\n\r\nexport const getHeaders = async (config: OpenAPIConfig, options: ApiRequestOptions): Promise<Headers> => {\r\n\tconst [token, username, password, additionalHeaders] = await Promise.all([\r\n\t\tresolve(options, config.TOKEN),\r\n\t\tresolve(options, config.USERNAME),\r\n\t\tresolve(options, config.PASSWORD),\r\n\t\tresolve(options, config.HEADERS),\r\n\t]);\r\n\r\n\tconst headers = Object.entries({\r\n\t\tAccept: 'application/json',\r\n\t\t...additionalHeaders,\r\n\t\t...options.headers,\r\n\t})\r\n\t\t.filter(([, value]) => value !== undefined && value !== null)\r\n\t\t.reduce((headers, [key, value]) => ({\r\n\t\t\t...headers,\r\n\t\t\t[key]: String(value),\r\n\t\t}), {} as Record<string, string>);\r\n\r\n\tif (isStringWithValue(token)) {\r\n\t\theaders['Authorization'] = `Bearer ${token}`;\r\n\t}\r\n\r\n\tif (isStringWithValue(username) && isStringWithValue(password)) {\r\n\t\tconst credentials = base64(`${username}:${password}`);\r\n\t\theaders['Authorization'] = `Basic ${credentials}`;\r\n\t}\r\n\r\n\tif (options.body !== undefined) {\r\n\t\tif (options.mediaType) {\r\n\t\t\theaders['Content-Type'] = options.mediaType;\r\n\t\t} else if (isBlob(options.body)) {\r\n\t\t\theaders['Content-Type'] = options.body.type || 'application/octet-stream';\r\n\t\t} else if (isString(options.body)) {\r\n\t\t\theaders['Content-Type'] = 'text/plain';\r\n\t\t} else if (!isFormData(options.body)) {\r\n\t\t\theaders['Content-Type'] = 'application/json';\r\n\t\t}\r\n\t}\r\n\r\n\treturn new Headers(headers);\r\n};\r\n\r\nexport const getRequestBody = (options: ApiRequestOptions): unknown => {\r\n\tif (options.body !== undefined) {\r\n\t\tif (options.mediaType?.includes('application/json') || options.mediaType?.includes('+json')) {\r\n\t\t\treturn JSON.stringify(options.body);\r\n\t\t} else if (isString(options.body) || isBlob(options.body) || isFormData(options.body)) {\r\n\t\t\treturn options.body;\r\n\t\t} else {\r\n\t\t\treturn JSON.stringify(options.body);\r\n\t\t}\r\n\t}\r\n\treturn undefined;\r\n};\r\n\r\nexport const sendRequest = async (\r\n\tconfig: OpenAPIConfig,\r\n\toptions: ApiRequestOptions,\r\n\turl: string,\r\n\tbody: any,\r\n\tformData: FormData | undefined,\r\n\theaders: Headers,\r\n\tonCancel: OnCancel\r\n): Promise<Response> => {\r\n\tconst controller = new AbortController();\r\n\r\n\tlet request: RequestInit = {\r\n\t\theaders,\r\n\t\tbody: body ?? formData,\r\n\t\tmethod: options.method,\r\n\t\tsignal: controller.signal,\r\n\t};\r\n\r\n\tif (config.WITH_CREDENTIALS) {\r\n\t\trequest.credentials = config.CREDENTIALS;\r\n\t}\r\n\r\n\tfor (const fn of config.interceptors.request._fns) {\r\n\t\trequest = await fn(request);\r\n\t}\r\n\r\n\tonCancel(() => controller.abort());\r\n\r\n\treturn await fetch(url, request);\r\n};\r\n\r\nexport const getResponseHeader = (response: Response, responseHeader?: string): string | undefined => {\r\n\tif (responseHeader) {\r\n\t\tconst content = response.headers.get(responseHeader);\r\n\t\tif (isString(content)) {\r\n\t\t\treturn content;\r\n\t\t}\r\n\t}\r\n\treturn undefined;\r\n};\r\n\r\nexport const getResponseBody = async (response: Response): Promise<unknown> => {\r\n\tif (response.status !== 204) {\r\n\t\ttry {\r\n\t\t\tconst contentType = response.headers.get('Content-Type');\r\n\t\t\tif (contentType) {\r\n\t\t\t\tconst binaryTypes = ['application/octet-stream', 'application/pdf', 'application/zip', 'audio/', 'image/', 'video/'];\r\n\t\t\t\tif (contentType.includes('application/json') || contentType.includes('+json')) {\r\n\t\t\t\t\treturn await response.json();\r\n\t\t\t\t} else if (binaryTypes.some(type => contentType.includes(type))) {\r\n\t\t\t\t\treturn await response.blob();\r\n\t\t\t\t} else if (contentType.includes('multipart/form-data')) {\r\n\t\t\t\t\treturn await response.formData();\r\n\t\t\t\t} else if (contentType.includes('text/')) {\r\n\t\t\t\t\treturn await response.text();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t}\r\n\treturn undefined;\r\n};\r\n\r\nexport const catchErrorCodes = (options: ApiRequestOptions, result: ApiResult): void => {\r\n\tconst errors: Record<number, string> = {\r\n\t\t400: 'Bad Request',\r\n\t\t401: 'Unauthorized',\r\n\t\t402: 'Payment Required',\r\n\t\t403: 'Forbidden',\r\n\t\t404: 'Not Found',\r\n\t\t405: 'Method Not Allowed',\r\n\t\t406: 'Not Acceptable',\r\n\t\t407: 'Proxy Authentication Required',\r\n\t\t408: 'Request Timeout',\r\n\t\t409: 'Conflict',\r\n\t\t410: 'Gone',\r\n\t\t411: 'Length Required',\r\n\t\t412: 'Precondition Failed',\r\n\t\t413: 'Payload Too Large',\r\n\t\t414: 'URI Too Long',\r\n\t\t415: 'Unsupported Media Type',\r\n\t\t416: 'Range Not Satisfiable',\r\n\t\t417: 'Expectation Failed',\r\n\t\t418: 'Im a teapot',\r\n\t\t421: 'Misdirected Request',\r\n\t\t422: 'Unprocessable Content',\r\n\t\t423: 'Locked',\r\n\t\t424: 'Failed Dependency',\r\n\t\t425: 'Too Early',\r\n\t\t426: 'Upgrade Required',\r\n\t\t428: 'Precondition Required',\r\n\t\t429: 'Too Many Requests',\r\n\t\t431: 'Request Header Fields Too Large',\r\n\t\t451: 'Unavailable For Legal Reasons',\r\n\t\t500: 'Internal Server Error',\r\n\t\t501: 'Not Implemented',\r\n\t\t502: 'Bad Gateway',\r\n\t\t503: 'Service Unavailable',\r\n\t\t504: 'Gateway Timeout',\r\n\t\t505: 'HTTP Version Not Supported',\r\n\t\t506: 'Variant Also Negotiates',\r\n\t\t507: 'Insufficient Storage',\r\n\t\t508: 'Loop Detected',\r\n\t\t510: 'Not Extended',\r\n\t\t511: 'Network Authentication Required',\r\n\t\t...options.errors,\r\n\t}\r\n\r\n\tconst error = errors[result.status];\r\n\tif (error) {\r\n\t\tthrow new ApiError(options, result, error);\r\n\t}\r\n\r\n\tif (!result.ok) {\r\n\t\tconst errorStatus = result.status ?? 'unknown';\r\n\t\tconst errorStatusText = result.statusText ?? 'unknown';\r\n\t\tconst errorBody = (() => {\r\n\t\t\ttry {\r\n\t\t\t\treturn JSON.stringify(result.body, null, 2);\r\n\t\t\t} catch (e) {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t})();\r\n\r\n\t\tthrow new ApiError(options, result,\r\n\t\t\t`Generic Error: status: ${errorStatus}; status text: ${errorStatusText}; body: ${errorBody}`\r\n\t\t);\r\n\t}\r\n};\r\n\r\n/**\r\n * Request method\r\n * @param config The OpenAPI configuration object\r\n * @param options The request options from the service\r\n * @returns CancelablePromise<T>\r\n * @throws ApiError\r\n */\r\nexport const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions): CancelablePromise<T> => {\r\n\treturn new CancelablePromise(async (resolve, reject, onCancel) => {\r\n\t\ttry {\r\n\t\t\tconst url = getUrl(config, options);\r\n\t\t\tconst formData = getFormData(options);\r\n\t\t\tconst body = getRequestBody(options);\r\n\t\t\tconst headers = await getHeaders(config, options);\r\n\r\n\t\t\tif (!onCancel.isCancelled) {\r\n\t\t\t\tlet response = await sendRequest(config, options, url, body, formData, headers, onCancel);\r\n\r\n\t\t\t\tfor (const fn of config.interceptors.response._fns) {\r\n\t\t\t\t\tresponse = await fn(response);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst responseBody = await getResponseBody(response);\r\n\t\t\t\tconst responseHeader = getResponseHeader(response, options.responseHeader);\r\n\r\n\t\t\t\tconst result: ApiResult = {\r\n\t\t\t\t\turl,\r\n\t\t\t\t\tok: response.ok,\r\n\t\t\t\t\tstatus: response.status,\r\n\t\t\t\t\tstatusText: response.statusText,\r\n\t\t\t\t\tbody: responseHeader ?? responseBody,\r\n\t\t\t\t};\r\n\r\n\t\t\t\tcatchErrorCodes(options, result);\r\n\r\n\t\t\t\tresolve(result.body);\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\treject(error);\r\n\t\t}\r\n\t});\r\n};","// This file is auto-generated by @hey-api/openapi-ts\r\n\r\nimport type { CancelablePromise } from './core/CancelablePromise';\r\nimport { OpenAPI } from './core/OpenAPI';\r\nimport { request as __request } from './core/request';\r\nimport type { GetContentTypesResponse, GetContentTypesByIndexIdData, GetContentTypesByIndexIdResponse, GetIndicesResponse, SaveIndexData, SaveIndexResponse, DeleteIndexData, DeleteIndexResponse, GetIndexByIdData, GetIndexByIdResponse, SearchData, SearchResponse, BuildIndexData, BuildIndexResponse } from './types.gen';\r\n\r\nexport class AlgoliaSearchService {\r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getContentTypes(): CancelablePromise<GetContentTypesResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/algolia-search/management/api/v1/search/content-type'\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getContentTypesByIndexId(data: GetContentTypesByIndexIdData): CancelablePromise<GetContentTypesByIndexIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/algolia-search/management/api/v1/search/content-type/index/{id}',\r\n            path: {\r\n                id: data.id\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getIndices(): CancelablePromise<GetIndicesResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/algolia-search/management/api/v1/search/index'\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static saveIndex(data: SaveIndexData = {}): CancelablePromise<SaveIndexResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/algolia-search/management/api/v1/search/index',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json'\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static deleteIndex(data: DeleteIndexData): CancelablePromise<DeleteIndexResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'DELETE',\r\n            url: '/umbraco/algolia-search/management/api/v1/search/index/{id}',\r\n            path: {\r\n                id: data.id\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.id\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static getIndexById(data: GetIndexByIdData): CancelablePromise<GetIndexByIdResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/algolia-search/management/api/v1/search/index/{id}',\r\n            path: {\r\n                id: data.id\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.indexId\r\n     * @param data.query\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static search(data: SearchData): CancelablePromise<SearchResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'GET',\r\n            url: '/umbraco/algolia-search/management/api/v1/search/index/{indexId}/search',\r\n            path: {\r\n                indexId: data.indexId\r\n            },\r\n            query: {\r\n                query: data.query\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * @param data The data for the request.\r\n     * @param data.requestBody\r\n     * @returns unknown OK\r\n     * @throws ApiError\r\n     */\r\n    public static buildIndex(data: BuildIndexData = {}): CancelablePromise<BuildIndexResponse> {\r\n        return __request(OpenAPI, {\r\n            method: 'POST',\r\n            url: '/umbraco/algolia-search/management/api/v1/search/index/build',\r\n            body: data.requestBody,\r\n            mediaType: 'application/json'\r\n        });\r\n    }\r\n    \r\n}","import { UmbControllerHost } from \"@umbraco-cms/backoffice/controller-api\";\r\nimport { tryExecuteAndNotify } from \"@umbraco-cms/backoffice/resources\";\r\nimport { AlgoliaSearchService, IndexConfigurationModel } from \"@umbraco-integrations/algolia/generated\";\r\n\r\nexport class AlgoliaIndexDataSource {\r\n\r\n    #host: UmbControllerHost;\r\n\r\n    constructor(host: UmbControllerHost) {\r\n        this.#host = host;\r\n    }\r\n\r\n    async getIndices() {\r\n\r\n        const { data, error } = await tryExecuteAndNotify(this.#host, AlgoliaSearchService.getIndices());\r\n\r\n        if (data) {\r\n            return data;\r\n        }\r\n\r\n        return { error };\r\n    }\r\n\r\n    async getIndexById(id: number) {\r\n\r\n        const { data, error } = await tryExecuteAndNotify(this.#host, AlgoliaSearchService.getIndexById({\r\n            id: id\r\n        }));\r\n\r\n        if (data) {\r\n            return data;\r\n        }\r\n\r\n        return { error };\r\n    }\r\n\r\n    async getContentTypes() {\r\n\r\n        const { data, error } = await tryExecuteAndNotify(this.#host, AlgoliaSearchService.getContentTypes());\r\n\r\n        if (data) {\r\n            return data;\r\n        }\r\n\r\n        return { error };\r\n    }\r\n\r\n    async getContentTypesWithIndex(id: number) {\r\n        const { data, error } = await tryExecuteAndNotify(this.#host, AlgoliaSearchService.getContentTypesByIndexId({\r\n            id: id\r\n        }));\r\n\r\n        if (data) {\r\n            return data;\r\n        }\r\n\r\n        return { error };\r\n    }\r\n\r\n    async saveIndex(indexConfiguration: IndexConfigurationModel) {\r\n        const { data, error } = await tryExecuteAndNotify(this.#host, AlgoliaSearchService.saveIndex({\r\n            requestBody: indexConfiguration\r\n        }));\r\n\r\n        if (data) {\r\n            return data;\r\n        }\r\n\r\n        return { error };\r\n    }\r\n\r\n    async buildIndex(indexConfiguration: IndexConfigurationModel) {\r\n        const { data, error } = await tryExecuteAndNotify(this.#host, AlgoliaSearchService.buildIndex({\r\n            requestBody: indexConfiguration\r\n        }));\r\n\r\n        if (data) {\r\n            return data;\r\n        }\r\n\r\n        return { error };\r\n    }\r\n\r\n    async deleteIndex(id: number) {\r\n        const { data, error } = await tryExecuteAndNotify(this.#host, AlgoliaSearchService.deleteIndex({\r\n            id: id\r\n        }));\r\n\r\n        if (data) {\r\n            return data;\r\n        }\r\n\r\n        return { error };\r\n    }\r\n\r\n    async searchIndex(id: number, query: string) {\r\n        const { data, error } = await tryExecuteAndNotify(this.#host, AlgoliaSearchService.search({\r\n            indexId: id,\r\n            query: query\r\n        }));\r\n\r\n        if (data) {\r\n            return data;\r\n        }\r\n\r\n        return { error };\r\n    }\r\n}","import { UmbControllerBase } from \"@umbraco-cms/backoffice/class-api\";\r\nimport { UmbControllerHost } from \"@umbraco-cms/backoffice/controller-api\";\r\n\r\nimport { AlgoliaIndexDataSource } from \"./algolia-index.data-source\";\r\nimport { IndexConfigurationModel } from \"@umbraco-integrations/algolia/generated\";\r\n\r\nexport class AlgoliaIndexRepository extends UmbControllerBase {\r\n\r\n    #algoliaIndexDataSource: AlgoliaIndexDataSource;\r\n\r\n    constructor(host: UmbControllerHost) {\r\n        super(host);\r\n\r\n        this.#algoliaIndexDataSource = new AlgoliaIndexDataSource(this);\r\n    }\r\n\r\n    async getIndices() {\r\n        return this.#algoliaIndexDataSource.getIndices();\r\n    }\r\n\r\n    async getIndexById(id: number) {\r\n        return this.#algoliaIndexDataSource.getIndexById(id);\r\n    }\r\n\r\n    async getContentTypes() {\r\n        return this.#algoliaIndexDataSource.getContentTypes();\r\n    }\r\n\r\n    async getContentTypesWithIndex(id: number) {\r\n        return this.#algoliaIndexDataSource.getContentTypesWithIndex(id);\r\n    }\r\n\r\n    async saveIndex(indexConfiguration: IndexConfigurationModel) {\r\n        return this.#algoliaIndexDataSource.saveIndex(indexConfiguration);\r\n    }\r\n\r\n    async buildIndex(indexConfiguration: IndexConfigurationModel) {\r\n        return this.#algoliaIndexDataSource.buildIndex(indexConfiguration);\r\n    }\r\n\r\n    async deleteIndex(id: number) {\r\n        return this.#algoliaIndexDataSource.deleteIndex(id);\r\n    }\r\n\r\n    async searchIndex(id: number, query: string) {\r\n        return this.#algoliaIndexDataSource.searchIndex(id, query);\r\n    }\r\n\r\n}\r\n","import { UmbControllerBase } from \"@umbraco-cms/backoffice/class-api\";\r\nimport { AlgoliaIndexRepository } from \"../repository/algolia-index.repository\";\r\nimport { UmbControllerHost } from \"@umbraco-cms/backoffice/controller-api\";\r\nimport { UmbContextToken } from \"@umbraco-cms/backoffice/context-api\";\r\nimport { IndexConfigurationModel } from \"@umbraco-integrations/algolia/generated\";\r\n\r\nexport class AlgoliaIndexContext extends UmbControllerBase {\r\n\r\n    #repository: AlgoliaIndexRepository;\r\n\r\n    constructor(host: UmbControllerHost) {\r\n        super(host);\r\n\r\n        this.provideContext(ALGOLIA_CONTEXT_TOKEN, this);\r\n        this.#repository = new AlgoliaIndexRepository(host);\r\n    }\r\n\r\n    async getIndices() {\r\n        return await this.#repository.getIndices();\r\n    }\r\n\r\n    async getIndexById(id: number) {\r\n        return this.#repository.getIndexById(id);\r\n    }\r\n\r\n    async getContentTypes() {\r\n        return await this.#repository.getContentTypes();\r\n    }\r\n\r\n    async getContentTypesWithIndex(id: number) {\r\n        return this.#repository.getContentTypesWithIndex(id);\r\n    }\r\n\r\n    async saveIndex(indexConfiguration: IndexConfigurationModel) {\r\n        return await this.#repository.saveIndex(indexConfiguration);\r\n    }\r\n\r\n    async buildIndex(indexConfiguration: IndexConfigurationModel) {\r\n        return this.#repository.buildIndex(indexConfiguration);\r\n    }\r\n\r\n    async deleteIndex(id: number) {\r\n        return await this.#repository.deleteIndex(id);\r\n    }\r\n\r\n    async searchIndex(id: number, query: string) {\r\n        return this.#repository.searchIndex(id, query);\r\n    }\r\n}\r\n\r\nexport default AlgoliaIndexContext;\r\n\r\nexport const ALGOLIA_CONTEXT_TOKEN =\r\n    new UmbContextToken<AlgoliaIndexContext>(AlgoliaIndexContext.name);\r\n"],"names":["ApiError","request","response","message","CancelError","CancelablePromise","executor","resolve","reject","onResolve","value","onReject","reason","onCancel","cancelHandler","onFulfilled","onRejected","onFinally","error","isString","isStringWithValue","isBlob","isFormData","base64","str","getQueryString","params","qs","append","key","encodePair","v","k","getUrl","config","options","encoder","path","substring","group","_a","url","getFormData","formData","process","resolver","getHeaders","token","username","password","additionalHeaders","headers","credentials","getRequestBody","_b","sendRequest","body","controller","fn","getResponseHeader","responseHeader","content","getResponseBody","contentType","binaryTypes","type","catchErrorCodes","result","errorStatus","errorStatusText","errorBody","responseBody","AlgoliaSearchService","__request","OpenAPI","data","AlgoliaIndexDataSource","host","__privateAdd","_host","__privateSet","tryExecuteAndNotify","__privateGet","id","indexConfiguration","query","AlgoliaIndexRepository","UmbControllerBase","_algoliaIndexDataSource","AlgoliaIndexContext","_repository","ALGOLIA_CONTEXT_TOKEN","UmbContextToken"],"mappings":"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"}