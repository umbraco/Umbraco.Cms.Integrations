{"version":3,"file":"algolia-index-BgJLZOFO.js","sources":["../../../Client/src/dashboard/search-management-dashboard/views/algolia-index.ts"],"sourcesContent":["import {\r\n    LitElement,\r\n    html,\r\n    css,\r\n    customElement,\r\n    property,\r\n    state,\r\n    nothing\r\n} from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\r\nimport {\r\n    UmbNotificationContext,\r\n    UMB_NOTIFICATION_CONTEXT,\r\n} from \"@umbraco-cms/backoffice/notification\";\r\n\r\nimport AlgoliaIndexContext, { ALGOLIA_CONTEXT_TOKEN } from \"../../../context/algolia-index.context\";\r\nimport {\r\n    IndexConfigurationModel,\r\n    ContentTypeDtoModel,\r\n    ResultModel\r\n} from \"@umbraco-integrations/algolia/generated\";\r\n\r\n@customElement(\"algolia-index\")\r\nexport class AlgoliaIndexElement extends UmbElementMixin(LitElement) {\r\n    #notificationContext?: UmbNotificationContext;\r\n    #algoliaIndexContext?: AlgoliaIndexContext;\r\n\r\n    @property()\r\n    indexId!: string;\r\n\r\n    @property()\r\n    indexName!: string;\r\n\r\n    @state()\r\n    private _model: IndexConfigurationModel = {\r\n        id: 0,\r\n        name: '',\r\n        contentData: []\r\n    };\r\n\r\n    @state()\r\n    private _contentTypes: Array<ContentTypeDtoModel> = [];\r\n\r\n    @state()\r\n    private _showContentTypeProperties: boolean;\r\n\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        if (this.indexId.length > 0) {\r\n            this._getContentTypesWithIndex();\r\n            this._getIndex();\r\n        }\r\n        else {\r\n            this._getContentTypes();\r\n        }\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.consumeContext(UMB_NOTIFICATION_CONTEXT, (_instance) => {\r\n            this.#notificationContext = _instance;\r\n        });\r\n        this.consumeContext(ALGOLIA_CONTEXT_TOKEN, (_instance) => {\r\n            this.#algoliaIndexContext = _instance;\r\n        });\r\n\r\n        this._showContentTypeProperties = false;\r\n    }\r\n\r\n    render() {\r\n        return html`\r\n            <uui-box headline=\"${this.indexId.length > 0 ? \"Create Index Definition\" : \"Edit Index Definition\"}\">\r\n                <uui-form>\r\n                    <form id=\"manageIndexFrm\" name=\"manageIndexFrm\" @submit=${this.handleSubmit}>\r\n                        <uui-form-layout-item>\r\n                            <uui-label slot=\"label\" for=\"inName\" required=\"\">Name</uui-label>\r\n                            <span class=\"alg-description\" slot=\"description\">Please enter a name for the index. After save,<br /> you will not be able to change it.</span>\r\n                            <div>\r\n                                ${this.indexId.length > 0\r\n                                    ? html`<uui-input type=\"text\" name=\"indexName\" label=\"indexName\" disabled .value=${this._model.name} style=\"width: 17%\"></uui-input>`\r\n                                    : html`<uui-input type=\"text\" name=\"indexName\" label=\"indexName\" .value=${this._model.name} style=\"width: 17%\"></uui-input>`\r\n                                }\r\n                                \r\n                            </div>\r\n                        </uui-form-layout-item>\r\n\r\n                        <div class=\"alg-col-2\">\r\n                            <uui-form-layout-item>\r\n                                <uui-label slot=\"label\">Document Types</uui-label>\r\n                                <span class=\"alg-description\" slot=\"description\">Please select the document types you would like to index, and choose the fields to include.</span>\r\n                                <uui-icon-registry-essential>\r\n                                    ${this.renderContentTypes()}\r\n                                </uui-icon-registry-essential>\r\n                            </uui-form-layout-item>\r\n                            ${this.renderContentTypeProperties()}\r\n                        </div>\r\n                        <uui-button type=\"submit\" label=\"Save\" look=\"primary\" color=\"positive\">\r\n                            Save\r\n                        </uui-button>\r\n                    </form>\r\n                </uui-form>\r\n\r\n            </uui-box>\r\n        `;\r\n    }\r\n\r\n    private async _getContentTypes() {\r\n\r\n        await this.#algoliaIndexContext?.getContentTypes()\r\n            .then(response => {\r\n                this._contentTypes = response as Array<ContentTypeDtoModel>;\r\n            })\r\n            .catch(error => this._showError(error.message));\r\n    }\r\n\r\n    private async _getContentTypesWithIndex() {\r\n        await this.#algoliaIndexContext?.getContentTypesWithIndex(Number(this.indexId))\r\n            .then(response => {\r\n                var result = response as Array<ContentTypeDtoModel>;\r\n                this._contentTypes = result;\r\n            })\r\n            .catch((error) => this._showError(error.message));\r\n    }\r\n\r\n    private async _getIndex() {\r\n        await this.#algoliaIndexContext?.getIndexById(Number(this.indexId))\r\n            .then(response => {\r\n                var result = response as IndexConfigurationModel;\r\n                this._model = result;\r\n                this.indexName = result.name;\r\n            })\r\n            .catch(error => this._showError(error.message));\r\n    }\r\n\r\n    // render\r\n    private renderContentTypes() {\r\n        if (this._contentTypes.length == 0) return nothing;\r\n        return html`\r\n            ${this._contentTypes.map((contentType) => {\r\n                return html`\r\n                    <uui-ref-node id=\"dc_${contentType.alias}_${contentType.id}\"\r\n                                selectable\r\n                                name=${contentType.name}\r\n                                @selected=${() => this._contentTypeSelected(contentType.id)}\r\n                                @deselected=${() => this._contentTypeDeselected(contentType.id)}>\r\n                        <uui-icon slot=\"icon\" name=${contentType.icon}></uui-icon>\r\n                        ${contentType.selected ? html`<uui-tag size=\"s\" slot=\"tag\" color=\"positive\">Selected</uui-tag>` : ''}\r\n                        <uui-action-bar slot=\"actions\">\r\n                            <uui-button label=\"Remove\" color=\"danger\">\r\n                                <uui-icon name=\"delete\"></uui-icon>\r\n                            </uui-button>\r\n                        </uui-action-bar>\r\n                    </uui-ref-node>\r\n                    `;\r\n                })}\r\n            `;\r\n    }\r\n    private renderContentTypeProperties() {\r\n        if (this._showContentTypeProperties === false) return nothing;\r\n\r\n        var selectedContentType = this._contentTypes.find((obj) => obj.selected == true);\r\n\r\n        if (selectedContentType === undefined) return nothing;\r\n\r\n        return html`\r\n            <uui-form-layout-item>\r\n                <uui-label slot=\"label\">${selectedContentType.name} Properties</uui-label>\r\n                    <div class=\"alg-col-3\">\r\n                        ${selectedContentType.properties.map((property) => {\r\n                            return html`\r\n                                <uui-card-content-node selectable\r\n                                            @selected=${() => this._contentTypePropertySelected(selectedContentType, property.id)}\r\n                                            @deselected=${() => this._contentTypePropertyDeselected(selectedContentType, property.id)}\r\n                                            name=${property.name}>\r\n                                    ${property.selected ? html`<uui-tag size=\"s\" slot=\"tag\" color=\"positive\">Selected</uui-tag>` : ''}\r\n                                    <ul style=\"list-style: none; padding-inline-start: 0px; margin: 0;\">\r\n                                        <li><span style=\"font-weight: 700\">Group: </span> ${property.group}</li>\r\n                                    </ul>\r\n                                </uui-card-content-node>\r\n                            `;\r\n                        })}\r\n                    </div>\r\n            </uui-form-layout-item>\r\n        `;\r\n    }\r\n\r\n    private async _contentTypeSelected(id: number) {\r\n        this._contentTypes = this._contentTypes.map((obj) => {\r\n            if (obj.id == id) {\r\n                obj.selected = true;\r\n            }\r\n            return obj;\r\n        });\r\n        this._showContentTypeProperties = true;\r\n    }\r\n    private async _contentTypeDeselected(id: number) {\r\n        this._contentTypes = this._contentTypes.map((obj) => {\r\n            if (obj.id == id) {\r\n                obj.selected = false;\r\n            }\r\n            return obj;\r\n        });\r\n        this._showContentTypeProperties = false;\r\n    }\r\n    private async _contentTypePropertySelected(contentType: ContentTypeDtoModel | undefined, id: number) {\r\n        if (contentType === undefined) return;\r\n\r\n        this._contentTypes = this._contentTypes.map((ctObj) => {\r\n            if (ctObj.id != contentType.id) return ctObj;\r\n\r\n            ctObj.properties = ctObj.properties.map((obj) => {\r\n                if (obj.id == id) {\r\n                    obj.selected = true;\r\n                }\r\n                return obj;\r\n            });\r\n\r\n            return ctObj;\r\n        });\r\n    }\r\n    private async _contentTypePropertyDeselected(contentType: ContentTypeDtoModel | undefined, id: number) {\r\n        if (contentType == undefined) return;\r\n        this._contentTypes = this._contentTypes.map((ctObj) => {\r\n            if (ctObj.id != contentType.id) return ctObj;\r\n\r\n            ctObj.properties = ctObj.properties.map((obj) => {\r\n                if (obj.id == id) {\r\n                    obj.selected = false;\r\n                }\r\n                return obj;\r\n            });\r\n\r\n            return ctObj;\r\n        });\r\n    }\r\n\r\n    private async handleSubmit(e: SubmitEvent) {\r\n        e.preventDefault();\r\n\r\n        const form = e.target as HTMLFormElement;\r\n        const formData = new FormData(form);\r\n\r\n        var indexName = this.indexId.length > 0\r\n            ? this.indexName\r\n            : formData.get(\"indexName\") as string;\r\n\r\n        if (indexName.length == 0 || this._contentTypes === undefined || this._contentTypes.filter(obj => obj.selected).length == 0) {\r\n            this._showError(\"Index name and content schema are required.\");\r\n            return;\r\n        }\r\n\r\n        var indexConfiguration: IndexConfigurationModel = {\r\n            id: 0,\r\n            name: indexName,\r\n            contentData: []\r\n        };\r\n\r\n        if (this.indexId.length > 0) {\r\n            indexConfiguration.id = Number(this.indexId);\r\n        }\r\n        indexConfiguration.contentData = this._contentTypes;\r\n\r\n        await this.#algoliaIndexContext?.saveIndex(indexConfiguration)\r\n            .then(response => {\r\n                var resultModel = response as ResultModel;\r\n                if (resultModel.success) {\r\n                    this._showSuccess(\"Index saved.\");\r\n\r\n                    const redirectPath = this.indexId.length > 0\r\n                        ? window.location.href.replace(`/index/${this.indexId}`, '')\r\n                        : window.location.href.replace('/index', '');\r\n\r\n                    window.history.pushState({}, '', redirectPath);\r\n                } else {\r\n                    this._showError(resultModel.error);\r\n                }\r\n            })\r\n            .catch((error) => this._showError(error.message));\r\n    }\r\n\r\n    // notifications\r\n    private _showSuccess(message: string) {\r\n        this.#notificationContext?.peek(\"positive\", {\r\n            data: { message: message },\r\n        });\r\n    }\r\n\r\n    private _showError(message: string) {\r\n        this.#notificationContext?.peek(\"danger\", {\r\n            data: { message: message },\r\n        });\r\n    }\r\n\r\n    static styles = [\r\n        css`\r\n          .center {\r\n            display: grid;\r\n            place-items: center;\r\n          }\r\n          .alg-col-2 {\r\n            display: grid;\r\n            grid-template-columns: 25% 60%;\r\n            gap: 20px;\r\n          }\r\n          .alg-col-3 {\r\n            display: grid;\r\n            grid-template-columns: 33% 33% 33%;\r\n            gap: 10px;\r\n          }\r\n        `,\r\n    ];\r\n}\r\n\r\nexport default AlgoliaIndexElement;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        'algolia-index': AlgoliaIndexElement\r\n    }\r\n}"],"names":["_notificationContext","_algoliaIndexContext","AlgoliaIndexElement","UmbElementMixin","LitElement","__privateAdd","UMB_NOTIFICATION_CONTEXT","_instance","__privateSet","ALGOLIA_CONTEXT_TOKEN","html","_a","__privateGet","response","error","result","nothing","contentType","selectedContentType","obj","property","id","ctObj","form","formData","indexName","indexConfiguration","resultModel","redirectPath","message","css","__decorateClass","state","customElement","AlgoliaIndexElement$1"],"mappings":"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"}