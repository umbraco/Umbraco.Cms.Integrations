{"version":3,"file":"algolia-search-CREhygO5.js","sources":["../../../Client/src/dashboard/search-management-dashboard/views/algolia-search.ts"],"sourcesContent":["import {\r\n    LitElement,\r\n    html,\r\n    css,\r\n    customElement,\r\n    property,\r\n    state,\r\n    query\r\n} from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\r\nimport {\r\n    UmbNotificationContext,\r\n    UMB_NOTIFICATION_CONTEXT,\r\n} from \"@umbraco-cms/backoffice/notification\";\r\n\r\nimport { IndexConfigurationModel, ResponseModel } from \"@umbraco-integrations/algolia/generated\";\r\nimport AlgoliaIndexContext, { ALGOLIA_CONTEXT_TOKEN } from \"../../../context/algolia-index.context\";\r\n\r\n@customElement(\"algolia-search\")\r\nexport class AlgoliaSearchElement extends UmbElementMixin(LitElement) {\r\n    #notificationContext?: UmbNotificationContext;\r\n    #algoliaIndexContext?: AlgoliaIndexContext;\r\n\r\n    @property()\r\n    indexId!: string;\r\n\r\n    @query('#search-input')\r\n    private _searchInput!: HTMLInputElement;\r\n\r\n    @state()\r\n    index: IndexConfigurationModel = {\r\n        id: Number(this.indexId),\r\n        name: \"\",\r\n        contentData: []\r\n    };\r\n\r\n    @state()\r\n    indexSearchResult: ResponseModel = {\r\n        itemsCount: 0,\r\n        pagesCount: 0,\r\n        itemsPerPage: 0,\r\n        hits: []\r\n    };\r\n\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        this._getIndex();\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.consumeContext(UMB_NOTIFICATION_CONTEXT, (_instance) => {\r\n            this.#notificationContext = _instance;\r\n        });\r\n        this.consumeContext(ALGOLIA_CONTEXT_TOKEN, (_instance) => {\r\n            this.#algoliaIndexContext = _instance;\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return html`\r\n            <uui-box headline=\"Search\">\r\n                <small slot=\"header\">Please enter the query you want to search by against index <b>${this.index.name}</b></small>\r\n                <div class=\"flex\">\r\n                    <uui-input\r\n                            type=\"search\"\r\n                            id=\"search-input\"\r\n                            placeholder=\"Type to filter...\"\r\n                            label=\"Type to filter\"\r\n                            @keypress=${this._onKeyPress}>\r\n                    </uui-input>\r\n                    <uui-button color=\"positive\" look=\"primary\" label=\"Search\" @click=\"${this._onSearch}\"> Search </uui-button>\r\n                </div>\r\n                <!--RESULTS -->\r\n                <div>\r\n                    <p>Items Count: ${this.indexSearchResult.itemsCount}</p>\r\n                    <p>Pages Count: ${this.indexSearchResult.pagesCount}</p>\r\n                    <p>Items per Page: ${this.indexSearchResult.itemsPerPage}</p>\r\n                    ${this.indexSearchResult.hits.map((obj) => {\r\n                            return html`\r\n                                <div>\r\n                                    ${Object.entries(obj).map((entry) => {\r\n                                        return html`\r\n                                            <p>\r\n                                                <b>${entry[0]}</b> : ${entry[1]}\r\n                                            </p>\r\n                                        `;\r\n                                    })}                                \r\n                                </div>\r\n                            `;\r\n                    })}\r\n                </div>\r\n            </uui-box>\r\n        `;\r\n    }\r\n\r\n    private async _getIndex() {\r\n        await this.#algoliaIndexContext?.getIndexById(Number(this.indexId))\r\n            .then(response => this.index = response as IndexConfigurationModel)\r\n            .catch(error => this._showError(error.message));\r\n    }\r\n\r\n    private _onKeyPress(e: KeyboardEvent) {\r\n        e.key == 'Enter' ? this._onSearch() : undefined;\r\n    }\r\n\r\n    private async _onSearch() {\r\n        if (!this._searchInput.value.length) return;\r\n\r\n        await this.#algoliaIndexContext?.searchIndex(Number(this.indexId), this._searchInput.value)\r\n            .then(response => {\r\n                this.indexSearchResult = response as ResponseModel;\r\n            })\r\n            .catch((error) => this._showError(error));\r\n    }\r\n\r\n    // notifications\r\n    private _showError(message: string) {\r\n        this.#notificationContext?.peek(\"danger\", {\r\n            data: { message: message },\r\n        });\r\n    }\r\n\r\n    static styles = [\r\n        css`\r\n            uui-box p {\r\n                margin-top: 0;\r\n            }\r\n            div.flex {\r\n                display: flex;\r\n            }\r\n            div.flex > uui-button {\r\n                padding-left: var(--uui-size-space-4);\r\n                height: 0;\r\n            }\r\n            uui-input {\r\n                width: 100%;\r\n                margin-bottom: var(--uui-size-space-5);\r\n            }\r\n        `,\r\n    ];\r\n}\r\n\r\nexport default AlgoliaSearchElement;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        'algolia-search': AlgoliaSearchElement\r\n    }\r\n}"],"names":["_notificationContext","_algoliaIndexContext","AlgoliaSearchElement","UmbElementMixin","LitElement","__privateAdd","UMB_NOTIFICATION_CONTEXT","_instance","__privateSet","ALGOLIA_CONTEXT_TOKEN","html","obj","entry","_a","__privateGet","response","error","message","css","__decorateClass","property","query","state","customElement","AlgoliaSearchElement$1"],"mappings":"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"}