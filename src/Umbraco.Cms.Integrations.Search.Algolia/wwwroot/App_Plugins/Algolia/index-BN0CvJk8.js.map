{"version":3,"file":"index-BN0CvJk8.js","sources":["../../../Client/generated/core/OpenAPI.ts","../../../Client/src/dashboard/manifest.ts","../../../Client/src/context/manifest.ts","../../../Client/src/index.ts"],"sourcesContent":["import type { ApiRequestOptions } from './ApiRequestOptions';\r\n\r\ntype Headers = Record<string, string>;\r\ntype Middleware<T> = (value: T) => T | Promise<T>;\r\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\r\n\r\nexport class Interceptors<T> {\r\n  _fns: Middleware<T>[];\r\n\r\n  constructor() {\r\n    this._fns = [];\r\n  }\r\n\r\n  eject(fn: Middleware<T>): void {\r\n    const index = this._fns.indexOf(fn);\r\n    if (index !== -1) {\r\n      this._fns = [...this._fns.slice(0, index), ...this._fns.slice(index + 1)];\r\n    }\r\n  }\r\n\r\n  use(fn: Middleware<T>): void {\r\n    this._fns = [...this._fns, fn];\r\n  }\r\n}\r\n\r\nexport type OpenAPIConfig = {\r\n\tBASE: string;\r\n\tCREDENTIALS: 'include' | 'omit' | 'same-origin';\r\n\tENCODE_PATH?: ((path: string) => string) | undefined;\r\n\tHEADERS?: Headers | Resolver<Headers> | undefined;\r\n\tPASSWORD?: string | Resolver<string> | undefined;\r\n\tTOKEN?: string | Resolver<string> | undefined;\r\n\tUSERNAME?: string | Resolver<string> | undefined;\r\n\tVERSION: string;\r\n\tWITH_CREDENTIALS: boolean;\r\n\tinterceptors: {\r\n\t\trequest: Interceptors<RequestInit>;\r\n\t\tresponse: Interceptors<Response>;\r\n\t};\r\n};\r\n\r\nexport const OpenAPI: OpenAPIConfig = {\r\n\tBASE: '',\r\n\tCREDENTIALS: 'include',\r\n\tENCODE_PATH: undefined,\r\n\tHEADERS: undefined,\r\n\tPASSWORD: undefined,\r\n\tTOKEN: undefined,\r\n\tUSERNAME: undefined,\r\n\tVERSION: 'Latest',\r\n\tWITH_CREDENTIALS: false,\r\n\tinterceptors: {\r\n\t\trequest: new Interceptors(),\r\n\t\tresponse: new Interceptors(),\r\n\t},\r\n};","import { ManifestDashboard } from \"@umbraco-cms/backoffice/extension-registry\";\r\n\r\nconst dashboardManifest: ManifestDashboard = {\r\n    type: \"dashboard\",\r\n    name: \"Algolia Search Management\",\r\n    alias: \"Algolia.Dashboard\",\r\n    elementName: \"algolia-dashboard-element\",\r\n    js: () => import(\"./search-management-dashboard/algolia-dashboard.element\"),\r\n    meta: {\r\n        label: \"Algolia Search Management\",\r\n        pathname: \"algolia-search-management\"\r\n    },\r\n    conditions: [\r\n        {\r\n            alias: \"Umb.Condition.SectionAlias\",\r\n            match: \"Umb.Section.Settings\"\r\n        }\r\n    ]\r\n};\r\n\r\nexport const manifest = dashboardManifest;","import { ManifestGlobalContext } from \"@umbraco-cms/backoffice/extension-registry\";\r\n\r\nconst contextManifest: ManifestGlobalContext = {\r\n    type: \"globalContext\",\r\n    alias: \"algolia.context\",\r\n    name: \"Algolia Context\",\r\n    js: () => import(\"./algolia-index.context\")\r\n};\r\n\r\nexport const manifest = contextManifest;","import { UmbEntryPointOnInit } from \"@umbraco-cms/backoffice/extension-api\";\r\nimport { UMB_AUTH_CONTEXT } from \"@umbraco-cms/backoffice/auth\";\r\nimport { OpenAPI } from \"@umbraco-integrations/algolia/generated\";\r\n\r\nimport { manifest as algoliaDashboardManifest } from \"./dashboard/manifest.ts\";\r\nimport { manifest as algoliaContextManifest } from \"./context/manifest.ts\";\r\n\r\nexport const onInit: UmbEntryPointOnInit = (host, extensionRegistry) => {\r\n\r\n    extensionRegistry.registerMany([algoliaDashboardManifest, algoliaContextManifest]);\r\n\r\n    host.consumeContext(UMB_AUTH_CONTEXT, async (instance) => {\r\n        const umbOpenApi = instance.getOpenApiConfiguration();\r\n        OpenAPI.TOKEN = umbOpenApi.token;\r\n        OpenAPI.BASE = umbOpenApi.base;\r\n        OpenAPI.WITH_CREDENTIALS = true;\r\n    });\r\n};\r\n"],"names":["Interceptors","fn","index","OpenAPI","dashboardManifest","manifest","contextManifest","onInit","host","extensionRegistry","algoliaDashboardManifest","algoliaContextManifest","UMB_AUTH_CONTEXT","instance","umbOpenApi"],"mappings":";AAMO,MAAMA,EAAgB;AAAA,EAG3B,cAAc;AACZ,SAAK,OAAO;EACd;AAAA,EAEA,MAAMC,GAAyB;AAC7B,UAAMC,IAAQ,KAAK,KAAK,QAAQD,CAAE;AAClC,IAAIC,MAAU,OACZ,KAAK,OAAO,CAAC,GAAG,KAAK,KAAK,MAAM,GAAGA,CAAK,GAAG,GAAG,KAAK,KAAK,MAAMA,IAAQ,CAAC,CAAC;AAAA,EAE5E;AAAA,EAEA,IAAID,GAAyB;AAC3B,SAAK,OAAO,CAAC,GAAG,KAAK,MAAMA,CAAE;AAAA,EAC/B;AACF;AAkBO,MAAME,IAAyB;AAAA,EACrC,MAAM;AAAA,EACN,aAAa;AAAA,EACb,aAAa;AAAA,EACb,SAAS;AAAA,EACT,UAAU;AAAA,EACV,OAAO;AAAA,EACP,UAAU;AAAA,EACV,SAAS;AAAA,EACT,kBAAkB;AAAA,EAClB,cAAc;AAAA,IACb,SAAS,IAAIH,EAAa;AAAA,IAC1B,UAAU,IAAIA,EAAa;AAAA,EAC5B;AACD,GCrDMI,IAAuC;AAAA,EACzC,MAAM;AAAA,EACN,MAAM;AAAA,EACN,OAAO;AAAA,EACP,aAAa;AAAA,EACb,IAAI,MAAM,OAAO,yCAAyD;AAAA,EAC1E,MAAM;AAAA,IACF,OAAO;AAAA,IACP,UAAU;AAAA,EACd;AAAA,EACA,YAAY;AAAA,IACR;AAAA,MACI,OAAO;AAAA,MACP,OAAO;AAAA,IACX;AAAA,EACJ;AACJ,GAEaC,IAAWD,GClBlBE,IAAyC;AAAA,EAC3C,MAAM;AAAA,EACN,OAAO;AAAA,EACP,MAAM;AAAA,EACN,IAAI,MAAM,OAAO,qCAAyB;AAC9C,GAEaD,IAAWC,GCFXC,IAA8B,CAACC,GAAMC,MAAsB;AAEpE,EAAAA,EAAkB,aAAa,CAACC,GAA0BC,CAAsB,CAAC,GAE5EH,EAAA,eAAeI,GAAkB,OAAOC,MAAa;AAChD,UAAAC,IAAaD,EAAS;AAC5B,IAAAV,EAAQ,QAAQW,EAAW,OAC3BX,EAAQ,OAAOW,EAAW,MAC1BX,EAAQ,mBAAmB;AAAA,EAAA,CAC9B;AACL;"}