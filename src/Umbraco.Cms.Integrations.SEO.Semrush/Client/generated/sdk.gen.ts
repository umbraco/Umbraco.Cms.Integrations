// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { GetTokenDetailsData, GetTokenDetailsResponse, PostTokenGetData, PostTokenGetResponse, PostTokenGetError, PostTokenRefreshData, PostTokenRefreshResponse, PostTokenRevokeData, PostTokenRevokeResponse, GetTokenValidateData, GetTokenValidateResponse, GetAuthData, GetAuthResponse, GetAuthUrlData, GetAuthUrlResponse, GetColumnsData, GetColumnsResponse, GetContentPropertiesData, GetContentPropertiesResponse, GetDataSourcesData, GetDataSourcesResponse, GetPingData, GetPingResponse, GetRelatedPhrasesData, GetRelatedPhrasesResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class AccessTokenService {
    public static getTokenDetails<ThrowOnError extends boolean = true>(options?: Options<GetTokenDetailsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTokenDetailsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/semrush/management/api/v1/token/details',
            ...options
        });
    }
    
    public static postTokenGet<ThrowOnError extends boolean = true>(options?: Options<PostTokenGetData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostTokenGetResponse, PostTokenGetError, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/semrush/management/api/v1/token/get',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options?.headers
            }
        });
    }
    
    public static postTokenRefresh<ThrowOnError extends boolean = true>(options?: Options<PostTokenRefreshData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostTokenRefreshResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/semrush/management/api/v1/token/refresh',
            ...options
        });
    }
    
    public static postTokenRevoke<ThrowOnError extends boolean = true>(options?: Options<PostTokenRevokeData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<PostTokenRevokeResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/semrush/management/api/v1/token/revoke',
            ...options
        });
    }
    
    public static getTokenValidate<ThrowOnError extends boolean = true>(options?: Options<GetTokenValidateData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetTokenValidateResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/semrush/management/api/v1/token/validate',
            ...options
        });
    }
    
}

export class SemrushService {
    public static getAuth<ThrowOnError extends boolean = true>(options?: Options<GetAuthData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetAuthResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/semrush/management/api/v1/auth',
            ...options
        });
    }
    
    public static getAuthUrl<ThrowOnError extends boolean = true>(options?: Options<GetAuthUrlData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetAuthUrlResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/semrush/management/api/v1/auth/url',
            ...options
        });
    }
    
    public static getColumns<ThrowOnError extends boolean = true>(options?: Options<GetColumnsData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetColumnsResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/semrush/management/api/v1/columns',
            ...options
        });
    }
    
    public static getContentProperties<ThrowOnError extends boolean = true>(options?: Options<GetContentPropertiesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetContentPropertiesResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/semrush/management/api/v1/content-properties',
            ...options
        });
    }
    
    public static getDataSources<ThrowOnError extends boolean = true>(options?: Options<GetDataSourcesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetDataSourcesResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/semrush/management/api/v1/data-sources',
            ...options
        });
    }
    
    public static getPing<ThrowOnError extends boolean = true>(options?: Options<GetPingData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetPingResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/semrush/management/api/v1/ping',
            ...options
        });
    }
    
    public static getRelatedPhrases<ThrowOnError extends boolean = true>(options?: Options<GetRelatedPhrasesData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<GetRelatedPhrasesResponse, unknown, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/umbraco/semrush/management/api/v1/related-phrases',
            ...options
        });
    }
    
}